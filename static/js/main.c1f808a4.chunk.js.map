{"version":3,"sources":["wooConfig.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","siteUrl","consumerKey","consumerSecret","Card","props","className","monster","name","width","height","src","images","alt","price","CardList","monsters","map","key","id","SearchBox","placeholder","handleChange","type","onChange","wooConfig","require","WooCommerce","url","wpAPI","version","App","e","setState","searchField","target","value","state","get","fetch","then","response","json","products","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iQAMAA,EAAOC,QANW,CACjBC,QAAS,6BACNC,YAAa,8CACbC,eAAgB,gD,wOCCPC,G,OAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACf,gCAAOD,EAAME,QAAQC,MACrB,yBAAKC,MAAM,MAAMC,OAAO,MACxBC,IAAON,EAAME,QAAQK,OAAO,GAAGD,IAAME,IAAI,YACzC,yBAAKP,UAAU,cAAf,IAA+BD,EAAME,QAAQO,UCHpCC,G,OAAW,SAACV,GAAD,OACpB,yBAAKC,UAAU,aACdD,EAAMW,SAASC,KAAK,SAAAV,GAAO,OACxB,kBAAC,EAAD,CAAMW,IAAOX,EAAQY,GAAIZ,QAASA,UCL7Ba,G,OAAY,SAAC,GAAD,IAAIC,EAAJ,EAAIA,YAAaC,EAAjB,EAAiBA,aAAjB,OAErB,2BACAhB,UAAU,SACViB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCLRG,G,OAAYC,EAAS,MAGrBC,EAAc,IAFID,EAAQ,KAEZ,CAAmB,CACtCE,IAAKH,EAAUxB,QACfC,YAAauB,EAAUvB,YACvBC,eAAgBsB,EAAUtB,eAC1B0B,OAAO,EACPC,QAAS,UA4CKC,E,YAxCb,aAAc,IAAD,8BACX,+CAiBFT,aAAe,SAAAU,GAAC,OAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBpC,EAAKC,MAAQ,CAEXrB,SAAU,GACVkB,YAAa,IANJ,E,iFAUO,IAAD,OACjBP,EAAYW,IAAI,YAChBC,MAAM,sLACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAQ,OAAI,EAAKV,SAAS,CAACjB,SAAU2B,OAC1CH,MAAK,SAAAG,GAAQ,OAAIC,QAAQC,IAAIF,Q,+BAMvB,IAAD,EAC4BG,KAAKT,MAA/BrB,EADF,EACEA,SAAUkB,EADZ,EACYA,YACZa,EAAmB/B,EAASgC,QAAO,SAAAzC,GAAO,OAC9CA,EAAQC,KAAKyC,cAAcC,SAAUhB,EAAYe,kBAGnD,OACE,yBAAK3C,UAAU,OACf,8FACA,kBAAC,EAAD,CACAe,YAAY,sBACZC,aAAewB,KAAKxB,eAEpB,kBAAC,EAAD,CAAUN,SAAU+B,S,GAnCRI,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.c1f808a4.chunk.js","sourcesContent":["const wooConfig = {\r\n\tsiteUrl: 'https://www.iamvitamin.com',\r\n    consumerKey: 'ck_45172b0b3e837b04f08194104c58d46a027d1ef7',\r\n    consumerSecret: 'cs_e38cd92e669bb2d7ea111afad300670158daa51d',\r\n};\r\n\r\nmodule.exports = wooConfig;","import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n    <h3> { props.monster.name }</h3>\r\n    <img width=\"640\" height=\"640\" \r\n    src= { props.monster.images[0].src } alt=\"Product\"/>\r\n    <div className='card-price'> { props.monster.price}</div>\r\n        \r\n    </div>\r\n\r\n)\r\n\r\n","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n    {props.monsters.map( monster => ( \r\n        <Card key = {monster.id} monster={monster} />\r\n    ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ( { placeholder, handleChange } ) => (\r\n\r\n    <input \r\n    className='search'\r\n    type='search'\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n    />\r\n\r\n)","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\nconst wooConfig = require( './wooConfig' );\nconst  WooCommerceAPI = require('woocommerce-api');\n\nconst WooCommerce = new WooCommerceAPI({\n\turl: wooConfig.siteUrl,\n\tconsumerKey: wooConfig.consumerKey,\n\tconsumerSecret: wooConfig.consumerSecret,\n\twpAPI: true,\n\tversion: 'wc/v1'\n});\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    WooCommerce.get(\"products\")\n    fetch('http://iamvitamin.com/wp-json/wc/v3/products?filter[limit]=-1&consumer_key=ck_45172b0b3e837b04f08194104c58d46a027d1ef7&consumer_secret=cs_e38cd92e669bb2d7ea111afad300670158daa51d')\n    .then(response => response.json())\n    .then(products => this.setState({monsters: products}))\n    .then(products => console.log(products));\n  }\n\n  handleChange = e =>\n  this.setState({ searchField: e.target.value });\n\n  render(){\n    const { monsters, searchField } = this.state; \n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes( searchField.toLowerCase())\n\n      )\n    return (\n      <div className=\"App\">\n      <h1> สินค้าใหม่ </h1>\n      <SearchBox\n      placeholder='search for products'\n      handleChange= {this.handleChange}\n      />\n      <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}